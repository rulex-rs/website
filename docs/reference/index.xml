<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://pomsky-lang.org/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 17 May 2022 13:55:00 +0000</lastBuildDate><atom:link href="https://pomsky-lang.org/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Formal grammar</title><link>https://pomsky-lang.org/docs/reference/grammar/</link><pubDate>Tue, 17 May 2022 13:55:00 +0000</pubDate><guid>https://pomsky-lang.org/docs/reference/grammar/</guid><description>Summary #This document uses pomsky syntax. Here&amp;rsquo;s an incomplete summary of the syntax, which should be enough to read the grammar:
Variables are declared as let var_name = expression; . This assigns expression to the variable var_name.
Verbatim text is wrapped in double quotes ("" ) or single quotes ('' ).
A * after a rule indicates that it repeats 0 or more times.</description></item><item><title>Unicode properties</title><link>https://pomsky-lang.org/docs/reference/unicode-properties/</link><pubDate>Tue, 17 May 2022 13:55:00 +0000</pubDate><guid>https://pomsky-lang.org/docs/reference/unicode-properties/</guid><description>Pomsky supports the following kinds of Unicode properties:
General categories Scripts Blocks Other boolean properties However, not all regex engines support all of them. In particular, blocks and other properties are poorly supported.
Note that regex requires underscores, and hyphens must be substituted with underscores.
List of General Categories #Each line contains one category and its aliases. The words in each line can be used interchangeably.
Cased_Letter, LC Close_Punctuation, Pe Connector_Punctuation, Pc Control, Cc, cntrl Currency_Symbol, Sc Dash_Punctuation, Pd Decimal_Number, Nd, digit, d Enclosing_Mark, Me Final_Punctuation, Pf Format, Cf Initial_Punctuation, Pi Letter, L Letter_Number, Nl Line_Separator, Zl Lowercase_Letter, Ll Mark, M, Combining_Mark Math_Symbol, Sm Modifier_Letter, Lm Modifier_Symbol, Sk Nonspacing_Mark, Mn Number, N Open_Punctuation, Ps Other, C Other_Letter, Lo Other_Number, No Other_Punctuation, Po Other_Symbol, So Paragraph_Separator, Zp Private_Use, Co Punctuation, P, punct Separator, Z, space, s Space_Separator, Zs Spacing_Mark, Mc Surrogate, Cs Symbol, S Titlecase_Letter, Lt Unassigned, Cn Uppercase_Letter, Lu List of Scripts #Each line contains one script and its abbreviation, if it has one.</description></item><item><title>Built-in variables</title><link>https://pomsky-lang.org/docs/reference/built-in-variables/</link><pubDate>Sun, 19 Jun 2022 13:50:00 +0000</pubDate><guid>https://pomsky-lang.org/docs/reference/built-in-variables/</guid><description>There are currently 6 built-in variables:
Grapheme matches a single extended grapheme cluster. It compiles to the regex \X. Note that this functionality is not available in all regex flavors. G is an alias for Grapheme Codepoint matches a single Unicode code point. It compiles to the regex [\s\S]. C is an alias for Codepoint Start: Matches the start of the string. It compiles to the regex ^. End: Matches the end of the string.</description></item><item><title>Security</title><link>https://pomsky-lang.org/docs/reference/security/</link><pubDate>Sun, 19 Jun 2022 13:55:00 +0000</pubDate><guid>https://pomsky-lang.org/docs/reference/security/</guid><description>If you intend to compile or execute pomsky expressions on a web server or other critical infrastructure, follow this advice, so you don&amp;rsquo;t end up vulnerable to attacks.
A billion laughs #The most important advice is to never compile an untrusted pomsky expression, since doing that may make you vulnerable for denial of service attacks. Here&amp;rsquo;s a simple example:
let lol = 'lol'; let lol1 = lol lol lol lol lol lol lol lol lol lol; let lol2 = lol1 lol1 lol1 lol1 lol1 lol1 lol1 lol1 lol1 lol1; let lol3 = lol2 lol2 lol2 lol2 lol2 lol2 lol2 lol2 lol2 lol2; let lol4 = lol3 lol3 lol3 lol3 lol3 lol3 lol3 lol3 lol3 lol3; let lol5 = lol4 lol4 lol4 lol4 lol4 lol4 lol4 lol4 lol4 lol4; let lol6 = lol5 lol5 lol5 lol5 lol5 lol5 lol5 lol5 lol5 lol5; let lol7 = lol6 lol6 lol6 lol6 lol6 lol6 lol6 lol6 lol6 lol6; let lol8 = lol7 lol7 lol7 lol7 lol7 lol7 lol7 lol7 lol7 lol7; let lol9 = lol8 lol8 lol8 lol8 lol8 lol8 lol8 lol8 lol8 lol8; lol9 What does this expression do?</description></item><item><title>Comparison with other projects</title><link>https://pomsky-lang.org/docs/reference/comparison/</link><pubDate>Sun, 10 Jul 2022 16:21:58 +0000</pubDate><guid>https://pomsky-lang.org/docs/reference/comparison/</guid><description>This wiki has a list of projects with similar goals to Pomksy. Here&amp;rsquo;s a list of the most popular projects:
⚠️
Disclaimer that as the maintainer of Pomsky, I am obviously biased. If you find any incorrect or misleading information, please open an issue.
Project Types GitHub Melody Transpiled Pomsky Transpiled Egg Expressions Transpiled</description></item></channel></rss>